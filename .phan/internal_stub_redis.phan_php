<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension redis@5.3.7

namespace {
class Redis {

    // constants
    const REDIS_NOT_FOUND = 0;
    const REDIS_STRING = 1;
    const REDIS_SET = 2;
    const REDIS_LIST = 3;
    const REDIS_ZSET = 4;
    const REDIS_HASH = 5;
    const REDIS_STREAM = 6;
    const PIPELINE = 2;
    const ATOMIC = 0;
    const MULTI = 1;
    const OPT_SERIALIZER = 1;
    const OPT_PREFIX = 2;
    const OPT_READ_TIMEOUT = 3;
    const OPT_TCP_KEEPALIVE = 6;
    const OPT_COMPRESSION = 7;
    const OPT_REPLY_LITERAL = 8;
    const OPT_COMPRESSION_LEVEL = 9;
    const OPT_NULL_MULTIBULK_AS_NULL = 10;
    const SERIALIZER_NONE = 0;
    const SERIALIZER_PHP = 1;
    const SERIALIZER_JSON = 4;
    const COMPRESSION_NONE = 0;
    const OPT_SCAN = 4;
    const SCAN_RETRY = 1;
    const SCAN_NORETRY = 0;
    const SCAN_PREFIX = 2;
    const SCAN_NOPREFIX = 3;
    const AFTER = 'after';
    const BEFORE = 'before';
    const OPT_MAX_RETRIES = 11;
    const OPT_BACKOFF_ALGORITHM = 12;
    const BACKOFF_ALGORITHM_DEFAULT = 0;
    const BACKOFF_ALGORITHM_CONSTANT = 6;
    const BACKOFF_ALGORITHM_UNIFORM = 5;
    const BACKOFF_ALGORITHM_EXPONENTIAL = 4;
    const BACKOFF_ALGORITHM_FULL_JITTER = 2;
    const BACKOFF_ALGORITHM_EQUAL_JITTER = 3;
    const BACKOFF_ALGORITHM_DECORRELATED_JITTER = 1;
    const OPT_BACKOFF_BASE = 13;
    const OPT_BACKOFF_CAP = 14;

    // methods
    public function __construct() {}
    public function __destruct() {}
    public function _prefix($key) {}
    public function _serialize($value) {}
    public function _unserialize($value) {}
    public function _pack($value) {}
    public function _unpack($value) {}
    public function _compress($value) {}
    public function _uncompress($value) {}
    public function acl($subcmd, ...$args) {}
    public function append($key, $value) {}
    public function auth($auth) {}
    public function bgSave() {}
    public function bgrewriteaof() {}
    public function bitcount($key) {}
    public function bitop($operation, $ret_key, $key, ...$other_keys) {}
    public function bitpos($key, $bit, $start = null, $end = null) {}
    public function blPop($key, $timeout_or_key, ...$extra_args) {}
    public function brPop($key, $timeout_or_key, ...$extra_args) {}
    public function brpoplpush($src, $dst, $timeout) {}
    public function bzPopMax($key, $timeout_or_key, ...$extra_args) {}
    public function bzPopMin($key, $timeout_or_key, ...$extra_args) {}
    public function clearLastError() {}
    public function client($cmd, ...$args) {}
    public function close() {}
    public function command(...$args) {}
    public function config($cmd, $key, $value = null) {}
    public function connect($host, $port = null, $timeout = null, $retry_interval = null) {}
    public function dbSize() {}
    public function debug($key) {}
    public function decr($key) {}
    public function decrBy($key, $value) {}
    public function del($key, ...$other_keys) {}
    public function discard() {}
    public function dump($key) {}
    public function echo($msg) {}
    public function eval($script, $args = null, $num_keys = null) {}
    public function evalsha($script_sha, $args = null, $num_keys = null) {}
    public function exec() {}
    public function exists($key, ...$other_keys) {}
    public function expire($key, $timeout) {}
    public function expireAt($key, $timestamp) {}
    public function flushAll($async = null) {}
    public function flushDB($async = null) {}
    public function geoadd($key, $lng, $lat, $member, ...$other_triples) {}
    public function geodist($key, $src, $dst, $unit = null) {}
    public function geohash($key, $member, ...$other_members) {}
    public function geopos($key, $member, ...$other_members) {}
    public function georadius($key, $lng, $lan, $radius, $unit, array $opts = unknown) {}
    public function georadius_ro($key, $lng, $lan, $radius, $unit, array $opts = unknown) {}
    public function georadiusbymember($key, $member, $radius, $unit, array $opts = unknown) {}
    public function georadiusbymember_ro($key, $member, $radius, $unit, array $opts = unknown) {}
    public function get($key) {}
    public function getAuth() {}
    public function getBit($key, $offset) {}
    public function getDBNum() {}
    public function getHost() {}
    public function getLastError() {}
    public function getMode() {}
    public function getOption($option) {}
    public function getPersistentID() {}
    public function getPort() {}
    public function getRange($key, $start, $end) {}
    public function getReadTimeout() {}
    public function getSet($key, $value) {}
    public function getTimeout() {}
    public function hDel($key, $member, ...$other_members) {}
    public function hExists($key, $member) {}
    public function hGet($key, $member) {}
    public function hGetAll($key) {}
    public function hIncrBy($key, $member, $value) {}
    public function hIncrByFloat($key, $member, $value) {}
    public function hKeys($key) {}
    public function hLen($key) {}
    public function hMget($key, array $keys) {}
    public function hMset($key, array $pairs) {}
    public function hSet($key, $member, $value) {}
    public function hSetNx($key, $member, $value) {}
    public function hStrLen($key, $member) {}
    public function hVals($key) {}
    public function hscan($str_key, &$i_iterator, $str_pattern = null, $i_count = null) {}
    public function incr($key) {}
    public function incrBy($key, $value) {}
    public function incrByFloat($key, $value) {}
    public function info($option = null) {}
    public function isConnected() {}
    public function keys($pattern) {}
    public function lInsert($key, $position, $pivot, $value) {}
    public function lLen($key) {}
    public function lPop($key) {}
    public function lPush($key, $value) {}
    public function lPushx($key, $value) {}
    public function lSet($key, $index, $value) {}
    public function lastSave() {}
    public function lindex($key, $index) {}
    public function lrange($key, $start, $end) {}
    public function lrem($key, $value, $count) {}
    public function ltrim($key, $start, $stop) {}
    public function mget(array $keys) {}
    public function migrate($host, $port, $key, $db, $timeout, $copy = null, $replace = null) {}
    public function move($key, $dbindex) {}
    public function mset(array $pairs) {}
    public function msetnx(array $pairs) {}
    public function multi($mode = null) {}
    public function object($field, $key) {}
    public function pconnect($host, $port = null, $timeout = null) {}
    public function persist($key) {}
    public function pexpire($key, $timestamp) {}
    public function pexpireAt($key, $timestamp) {}
    public function pfadd($key, array $elements) {}
    public function pfcount($key) {}
    public function pfmerge($dstkey, array $keys) {}
    public function ping() {}
    public function pipeline() {}
    public function psetex($key, $expire, $value) {}
    public function psubscribe(array $patterns, $callback) {}
    public function pttl($key) {}
    public function publish($channel, $message) {}
    public function pubsub($cmd, ...$args) {}
    public function punsubscribe($pattern, ...$other_patterns) {}
    public function rPop($key) {}
    public function rPush($key, $value) {}
    public function rPushx($key, $value) {}
    public function randomKey() {}
    public function rawcommand($cmd, ...$args) {}
    public function rename($key, $newkey) {}
    public function renameNx($key, $newkey) {}
    public function restore($ttl, $key, $value) {}
    public function role() {}
    public function rpoplpush($src, $dst) {}
    public function sAdd($key, $value) {}
    public function sAddArray($key, array $options) {}
    public function sDiff($key, ...$other_keys) {}
    public function sDiffStore($dst, $key, ...$other_keys) {}
    public function sInter($key, ...$other_keys) {}
    public function sInterStore($dst, $key, ...$other_keys) {}
    public function sMembers($key) {}
    public function sMisMember($key, $member, ...$other_members) {}
    public function sMove($src, $dst, $value) {}
    public function sPop($key) {}
    public function sRandMember($key, $count = null) {}
    public function sUnion($key, ...$other_keys) {}
    public function sUnionStore($dst, $key, ...$other_keys) {}
    public function save() {}
    public function scan(&$i_iterator, $str_pattern = null, $i_count = null) {}
    public function scard($key) {}
    public function script($cmd, ...$args) {}
    public function select($dbindex) {}
    public function set($key, $value, $opts = null) {}
    public function setBit($key, $offset, $value) {}
    public function setOption($option, $value) {}
    public function setRange($key, $offset, $value) {}
    public function setex($key, $expire, $value) {}
    public function setnx($key, $value) {}
    public function sismember($key, $value) {}
    public function slaveof($host = null, $port = null) {}
    public function slowlog($arg, $option = null) {}
    public function sort($key, array $options = unknown) {}
    public function sortAsc($key, $pattern = null, $get = null, $start = null, $end = null, $getList = null) {}
    public function sortAscAlpha($key, $pattern = null, $get = null, $start = null, $end = null, $getList = null) {}
    public function sortDesc($key, $pattern = null, $get = null, $start = null, $end = null, $getList = null) {}
    public function sortDescAlpha($key, $pattern = null, $get = null, $start = null, $end = null, $getList = null) {}
    public function srem($key, $member, ...$other_members) {}
    public function sscan($str_key, &$i_iterator, $str_pattern = null, $i_count = null) {}
    public function strlen($key) {}
    public function subscribe(array $channels, $callback) {}
    public function swapdb($srcdb, $dstdb) {}
    public function time() {}
    public function ttl($key) {}
    public function type($key) {}
    public function unlink($key, ...$other_keys) {}
    public function unsubscribe($channel, ...$other_channels) {}
    public function unwatch() {}
    public function wait($numslaves, $timeout) {}
    public function watch($key, ...$other_keys) {}
    public function xack($str_key, $str_group, array $arr_ids) {}
    public function xadd($str_key, $str_id, array $arr_fields, $i_maxlen = null, $boo_approximate = null) {}
    public function xclaim($str_key, $str_group, $str_consumer, $i_min_idle, array $arr_ids, array $arr_opts = unknown) {}
    public function xdel($str_key, array $arr_ids) {}
    public function xgroup($str_operation, $str_key = null, $str_arg1 = null, $str_arg2 = null, $str_arg3 = null) {}
    public function xinfo($str_cmd, $str_key = null, $str_group = null) {}
    public function xlen($key) {}
    public function xpending($str_key, $str_group, $str_start = null, $str_end = null, $i_count = null, $str_consumer = null) {}
    public function xrange($str_key, $str_start, $str_end, $i_count = null) {}
    public function xread(array $arr_streams, $i_count = null, $i_block = null) {}
    public function xreadgroup($str_group, $str_consumer, array $arr_streams, $i_count = null, $i_block = null) {}
    public function xrevrange($str_key, $str_start, $str_end, $i_count = null) {}
    public function xtrim($str_key, $i_maxlen, $boo_approximate = null) {}
    public function zAdd($key, $score, $value, ...$extra_args) {}
    public function zCard($key) {}
    public function zCount($key, $min, $max) {}
    public function zIncrBy($key, $value, $member) {}
    public function zLexCount($key, $min, $max) {}
    public function zPopMax($key) {}
    public function zPopMin($key) {}
    public function zRange($key, $start, $end, $scores = null) {}
    public function zRangeByLex($key, $min, $max, $offset = null, $limit = null) {}
    public function zRangeByScore($key, $start, $end, array $options = unknown) {}
    public function zRank($key, $member) {}
    public function zRem($key, $member, ...$other_members) {}
    public function zRemRangeByLex($key, $min, $max) {}
    public function zRemRangeByRank($key, $start, $end) {}
    public function zRemRangeByScore($key, $min, $max) {}
    public function zRevRange($key, $start, $end, $scores = null) {}
    public function zRevRangeByLex($key, $min, $max, $offset = null, $limit = null) {}
    public function zRevRangeByScore($key, $start, $end, array $options = unknown) {}
    public function zRevRank($key, $member) {}
    public function zScore($key, $member) {}
    public function zinterstore($key, array $keys, ?array $weights = null, $aggregate = null) {}
    public function zscan($str_key, &$i_iterator, $str_pattern = null, $i_count = null) {}
    public function zunionstore($key, array $keys, ?array $weights = null, $aggregate = null) {}
    public function delete($key, ...$other_keys) {}
    public function evaluate($script, $args = null, $num_keys = null) {}
    public function evaluateSha($script_sha, $args = null, $num_keys = null) {}
    public function getKeys($pattern) {}
    public function getMultiple(array $keys) {}
    public function lGet($key, $index) {}
    public function lGetRange($key, $start, $end) {}
    public function lRemove($key, $value, $count) {}
    public function lSize($key) {}
    public function listTrim($key, $start, $stop) {}
    public function open($host, $port = null, $timeout = null, $retry_interval = null) {}
    public function popen($host, $port = null, $timeout = null) {}
    public function renameKey($key, $newkey) {}
    public function sContains($key, $value) {}
    public function sGetMembers($key) {}
    public function sRemove($key, $member, ...$other_members) {}
    public function sSize($key) {}
    public function sendEcho($msg) {}
    public function setTimeout($key, $timeout) {}
    public function substr($key, $start, $end) {}
    public function zDelete($key, $member, ...$other_members) {}
    public function zDeleteRangeByRank($key, $min, $max) {}
    public function zDeleteRangeByScore($key, $min, $max) {}
    public function zInter($key, array $keys, ?array $weights = null, $aggregate = null) {}
    public function zRemove($key, $member, ...$other_members) {}
    public function zRemoveRangeByScore($key, $min, $max) {}
    public function zReverseRange($key, $start, $end, $scores = null) {}
    public function zSize($key) {}
    public function zUnion($key, array $keys, ?array $weights = null, $aggregate = null) {}
}

class RedisArray {

    // methods
    public function __call($function_name, $arguments) {}
    public function __construct($name_or_hosts, array $options = unknown) {}
    public function _continuum() {}
    public function _distributor() {}
    public function _function() {}
    public function _hosts() {}
    public function _instance($host) {}
    public function _rehash($callable = null) {}
    public function _target($key) {}
    public function bgsave() {}
    public function del($keys) {}
    public function discard() {}
    public function exec() {}
    public function flushall($async = null) {}
    public function flushdb($async = null) {}
    public function getOption($opt) {}
    public function hscan($str_key, &$i_iterator, $str_pattern = null, $i_count = null) {}
    public function info() {}
    public function keys($pattern) {}
    public function mget($keys) {}
    public function mset($pairs) {}
    public function multi($host, $mode = null) {}
    public function ping() {}
    public function save() {}
    public function scan(&$iterator, $node, $pattern = null, $count = null) {}
    public function select($index) {}
    public function setOption($opt, $value) {}
    public function sscan($str_key, &$i_iterator, $str_pattern = null, $i_count = null) {}
    public function unlink() {}
    public function unwatch() {}
    public function zscan($str_key, &$i_iterator, $str_pattern = null, $i_count = null) {}
    public function delete($keys) {}
    public function getMultiple($keys) {}
}

class RedisCluster {

    // constants
    const REDIS_NOT_FOUND = 0;
    const REDIS_STRING = 1;
    const REDIS_SET = 2;
    const REDIS_LIST = 3;
    const REDIS_ZSET = 4;
    const REDIS_HASH = 5;
    const REDIS_STREAM = 6;
    const ATOMIC = 0;
    const MULTI = 1;
    const OPT_SERIALIZER = 1;
    const OPT_PREFIX = 2;
    const OPT_READ_TIMEOUT = 3;
    const OPT_TCP_KEEPALIVE = 6;
    const OPT_COMPRESSION = 7;
    const OPT_REPLY_LITERAL = 8;
    const OPT_COMPRESSION_LEVEL = 9;
    const OPT_NULL_MULTIBULK_AS_NULL = 10;
    const SERIALIZER_NONE = 0;
    const SERIALIZER_PHP = 1;
    const SERIALIZER_JSON = 4;
    const COMPRESSION_NONE = 0;
    const OPT_SCAN = 4;
    const SCAN_RETRY = 1;
    const SCAN_NORETRY = 0;
    const SCAN_PREFIX = 2;
    const SCAN_NOPREFIX = 3;
    const AFTER = 'after';
    const BEFORE = 'before';
    const OPT_SLAVE_FAILOVER = 5;
    const FAILOVER_NONE = 0;
    const FAILOVER_ERROR = 1;
    const FAILOVER_DISTRIBUTE = 2;
    const FAILOVER_DISTRIBUTE_SLAVES = 3;
    const OPT_MAX_RETRIES = 11;
    const OPT_BACKOFF_ALGORITHM = 12;
    const BACKOFF_ALGORITHM_DEFAULT = 0;
    const BACKOFF_ALGORITHM_CONSTANT = 6;
    const BACKOFF_ALGORITHM_UNIFORM = 5;
    const BACKOFF_ALGORITHM_EXPONENTIAL = 4;
    const BACKOFF_ALGORITHM_FULL_JITTER = 2;
    const BACKOFF_ALGORITHM_EQUAL_JITTER = 3;
    const BACKOFF_ALGORITHM_DECORRELATED_JITTER = 1;
    const OPT_BACKOFF_BASE = 13;
    const OPT_BACKOFF_CAP = 14;

    // methods
    public function __construct($name, array $seeds = unknown, $timeout = null, $read_timeout = null, $persistent = null, $auth = null) {}
    public function _masters() {}
    public function _prefix($key) {}
    public function _redir() {}
    public function _serialize($value) {}
    public function _unserialize($value) {}
    public function _compress($value) {}
    public function _uncompress($value) {}
    public function _pack($value) {}
    public function _unpack($value) {}
    public function acl($key_or_address, $subcmd, ...$args) {}
    public function append($key, $value) {}
    public function bgrewriteaof($key_or_address) {}
    public function bgsave($key_or_address) {}
    public function bitcount($key) {}
    public function bitop($operation, $ret_key, $key, ...$other_keys) {}
    public function bitpos($key, $bit, $start = null, $end = null) {}
    public function blpop($key, $timeout_or_key, ...$extra_args) {}
    public function brpop($key, $timeout_or_key, ...$extra_args) {}
    public function brpoplpush($src, $dst, $timeout) {}
    public function clearlasterror() {}
    public function bzpopmax($key, $timeout_or_key, ...$extra_args) {}
    public function bzpopmin($key, $timeout_or_key, ...$extra_args) {}
    public function client($key_or_address, $arg = null, ...$other_args) {}
    public function close() {}
    public function cluster($key_or_address, $arg = null, ...$other_args) {}
    public function command(...$args) {}
    public function config($key_or_address, $arg = null, ...$other_args) {}
    public function dbsize($key_or_address) {}
    public function decr($key) {}
    public function decrby($key, $value) {}
    public function del($key, ...$other_keys) {}
    public function discard() {}
    public function dump($key) {}
    public function echo($msg) {}
    public function eval($script, $args = null, $num_keys = null) {}
    public function evalsha($script_sha, $args = null, $num_keys = null) {}
    public function exec() {}
    public function exists($key) {}
    public function expire($key, $timeout) {}
    public function expireat($key, $timestamp) {}
    public function flushall($key_or_address, $async = null) {}
    public function flushdb($key_or_address, $async = null) {}
    public function geoadd($key, $lng, $lat, $member, ...$other_triples) {}
    public function geodist($key, $src, $dst, $unit = null) {}
    public function geohash($key, $member, ...$other_members) {}
    public function geopos($key, $member, ...$other_members) {}
    public function georadius($key, $lng, $lan, $radius, $unit, array $opts = unknown) {}
    public function georadius_ro($key, $lng, $lan, $radius, $unit, array $opts = unknown) {}
    public function georadiusbymember($key, $member, $radius, $unit, array $opts = unknown) {}
    public function georadiusbymember_ro($key, $member, $radius, $unit, array $opts = unknown) {}
    public function get($key) {}
    public function getbit($key, $offset) {}
    public function getlasterror() {}
    public function getmode() {}
    public function getoption($option) {}
    public function getrange($key, $start, $end) {}
    public function getset($key, $value) {}
    public function hdel($key, $member, ...$other_members) {}
    public function hexists($key, $member) {}
    public function hget($key, $member) {}
    public function hgetall($key) {}
    public function hincrby($key, $member, $value) {}
    public function hincrbyfloat($key, $member, $value) {}
    public function hkeys($key) {}
    public function hlen($key) {}
    public function hmget($key, array $keys) {}
    public function hmset($key, array $pairs) {}
    public function hscan($str_key, &$i_iterator, $str_pattern = null, $i_count = null) {}
    public function hset($key, $member, $value) {}
    public function hsetnx($key, $member, $value) {}
    public function hstrlen($key, $member) {}
    public function hvals($key) {}
    public function incr($key) {}
    public function incrby($key, $value) {}
    public function incrbyfloat($key, $value) {}
    public function info($key_or_address, $option = null) {}
    public function keys($pattern) {}
    public function lastsave($key_or_address) {}
    public function lget($key, $index) {}
    public function lindex($key, $index) {}
    public function linsert($key, $position, $pivot, $value) {}
    public function llen($key) {}
    public function lpop($key) {}
    public function lpush($key, $value) {}
    public function lpushx($key, $value) {}
    public function lrange($key, $start, $end) {}
    public function lrem($key, $value) {}
    public function lset($key, $index, $value) {}
    public function ltrim($key, $start, $stop) {}
    public function mget(array $keys) {}
    public function mset(array $pairs) {}
    public function msetnx(array $pairs) {}
    public function multi() {}
    public function object($field, $key) {}
    public function persist($key) {}
    public function pexpire($key, $timestamp) {}
    public function pexpireat($key, $timestamp) {}
    public function pfadd($key, array $elements) {}
    public function pfcount($key) {}
    public function pfmerge($dstkey, array $keys) {}
    public function ping($key_or_address) {}
    public function psetex($key, $expire, $value) {}
    public function psubscribe(array $patterns, $callback) {}
    public function pttl($key) {}
    public function publish($channel, $message) {}
    public function pubsub($key_or_address, $arg = null, ...$other_args) {}
    public function punsubscribe($pattern, ...$other_patterns) {}
    public function randomkey($key_or_address) {}
    public function rawcommand($cmd, ...$args) {}
    public function rename($key, $newkey) {}
    public function renamenx($key, $newkey) {}
    public function restore($ttl, $key, $value) {}
    public function role() {}
    public function rpop($key) {}
    public function rpoplpush($src, $dst) {}
    public function rpush($key, $value) {}
    public function rpushx($key, $value) {}
    public function sadd($key, $value) {}
    public function saddarray($key, array $options) {}
    public function save($key_or_address) {}
    public function scan(&$i_iterator, $str_node, $str_pattern = null, $i_count = null) {}
    public function scard($key) {}
    public function script($key_or_address, $arg = null, ...$other_args) {}
    public function sdiff($key, ...$other_keys) {}
    public function sdiffstore($dst, $key, ...$other_keys) {}
    public function set($key, $value, $opts = null) {}
    public function setbit($key, $offset, $value) {}
    public function setex($key, $expire, $value) {}
    public function setnx($key, $value) {}
    public function setoption($option, $value) {}
    public function setrange($key, $offset, $value) {}
    public function sinter($key, ...$other_keys) {}
    public function sinterstore($dst, $key, ...$other_keys) {}
    public function sismember($key, $value) {}
    public function slowlog($key_or_address, $arg = null, ...$other_args) {}
    public function smembers($key) {}
    public function smove($src, $dst, $value) {}
    public function sort($key, array $options = unknown) {}
    public function spop($key) {}
    public function srandmember($key, $count = null) {}
    public function srem($key, $value) {}
    public function sscan($str_key, &$i_iterator, $str_pattern = null, $i_count = null) {}
    public function strlen($key) {}
    public function subscribe(array $channels, $callback) {}
    public function sunion($key, ...$other_keys) {}
    public function sunionstore($dst, $key, ...$other_keys) {}
    public function time() {}
    public function ttl($key) {}
    public function type($key) {}
    public function unsubscribe($channel, ...$other_channels) {}
    public function unlink($key, ...$other_keys) {}
    public function unwatch() {}
    public function watch($key, ...$other_keys) {}
    public function xack($str_key, $str_group, array $arr_ids) {}
    public function xadd($str_key, $str_id, array $arr_fields, $i_maxlen = null, $boo_approximate = null) {}
    public function xclaim($str_key, $str_group, $str_consumer, $i_min_idle, array $arr_ids, array $arr_opts = unknown) {}
    public function xdel($str_key, array $arr_ids) {}
    public function xgroup($str_operation, $str_key = null, $str_arg1 = null, $str_arg2 = null, $str_arg3 = null) {}
    public function xinfo($str_cmd, $str_key = null, $str_group = null) {}
    public function xlen($key) {}
    public function xpending($str_key, $str_group, $str_start = null, $str_end = null, $i_count = null, $str_consumer = null) {}
    public function xrange($str_key, $str_start, $str_end, $i_count = null) {}
    public function xread(array $arr_streams, $i_count = null, $i_block = null) {}
    public function xreadgroup($str_group, $str_consumer, array $arr_streams, $i_count = null, $i_block = null) {}
    public function xrevrange($str_key, $str_start, $str_end, $i_count = null) {}
    public function xtrim($str_key, $i_maxlen, $boo_approximate = null) {}
    public function zadd($key, $score, $value, ...$extra_args) {}
    public function zcard($key) {}
    public function zcount($key, $min, $max) {}
    public function zincrby($key, $value, $member) {}
    public function zinterstore($key, array $keys, ?array $weights = null, $aggregate = null) {}
    public function zlexcount($key, $min, $max) {}
    public function zpopmax($key) {}
    public function zpopmin($key) {}
    public function zrange($key, $start, $end, $scores = null) {}
    public function zrangebylex($key, $min, $max, $offset = null, $limit = null) {}
    public function zrangebyscore($key, $start, $end, array $options = unknown) {}
    public function zrank($key, $member) {}
    public function zrem($key, $member, ...$other_members) {}
    public function zremrangebylex($key, $min, $max) {}
    public function zremrangebyrank($key, $min, $max) {}
    public function zremrangebyscore($key, $min, $max) {}
    public function zrevrange($key, $start, $end, $scores = null) {}
    public function zrevrangebylex($key, $min, $max, $offset = null, $limit = null) {}
    public function zrevrangebyscore($key, $start, $end, array $options = unknown) {}
    public function zrevrank($key, $member) {}
    public function zscan($str_key, &$i_iterator, $str_pattern = null, $i_count = null) {}
    public function zscore($key, $member) {}
    public function zunionstore($key, array $keys, ?array $weights = null, $aggregate = null) {}
}

class RedisClusterException extends \Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class RedisException extends \Exception {

    // properties
    protected $message;
    protected $code;
    protected $file;
    protected $line;
}

class RedisSentinel {

    // methods
    public function __construct($host, $port = null, $timeout = null, $persistent = null, $retry_interval = null, $read_timeout = null) {}
    public function ckquorum($value) {}
    public function failover($value) {}
    public function flushconfig() {}
    public function getMasterAddrByName($value) {}
    public function master($value) {}
    public function masters() {}
    public function ping() {}
    public function reset($value) {}
    public function sentinels($value) {}
    public function slaves($value) {}
}

}
